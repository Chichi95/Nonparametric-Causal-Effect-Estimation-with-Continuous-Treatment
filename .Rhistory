#     return(x)
#   }
#
#   inv <- function(x) {
#
#     if (any(is.na(x))) return(x)
#
#     # get indices for the relevant regions
#     isq <- x > from & x < from + (to - from)/factor
#     ito <- x >= from + (to - from)/factor
#
#     # apply transformation
#     x[isq] <- from + (x[isq] - from) * factor
#     x[ito] <- to + (x[ito] - (from + (to - from)/factor))
#
#     return(x)
#   }
#
#   # return the transformation
#   return(trans_new("squished", trans, inv))
# }
sr = vector()
power = vector()
error_s = vector()
error_twoinf = vector()
error = vector()
upper = vector()
lower = vector()
linetype1 = vector()
linetype2 = vector()
for (pi in 1:length(p_pool)){
ac_s = matrix(0, nrow =1,ncol = length(g_pool) + 1)
ac_twoinf = matrix(0, nrow =1,ncol = length(g_pool) + 1)
p = p_pool[pi]
for (i in 1:N){
ac_s = rbind(ac_s, overall_record[[pi]][[i]][[1]])
ac_twoinf = rbind(ac_twoinf, overall_record[[pi]][[i]][[2]])
}
0
error_s = c(error_s, apply(ac_s[-1,],2,mean))
error_twoinf = c(error_twoinf, apply(ac_twoinf[-1,],2,mean))
linetype1 = c(linetype1,rep(1,length(g_pool) + 1))
linetype2 = c(linetype2,rep(2,length(g_pool) + 1))
sr = c(sr,rep(p_pool[pi],length(g_pool) + 1))
power = c(power, c("Benchmark", paste("power", as.character(g_pool))))
#Range sketching: RS; Randomized rangefinder: RR
}
data = data.frame(median = error_s, sample_size = sr, power = as.factor(power), lt = linetype1 %>% as.factor)
data2 = data.frame(median = error_twoinf, sample_size = sr, power = as.factor(power), lt = linetype2 %>% as.factor)
# #sparse
# ggplot(data = data,aes(x=sample_size, y= median, color= power,linetype = power)) +
#   geom_line() + theme_minimal() +
#   # coord_cartesian(ylim = c(0,4)) +
#   theme(legend.position="bottom") + scale_color_manual(
#     breaks = power[1:9],
#     values = c('black','#F596AA','#FFBA84','#D9CD90', '#A5DEE4',
#                '#D0104C', '#F9BF45', '#7BA23F', '#268785')) +
#   scale_linetype_manual(breaks = power[1:9], values = c(1,rep(6,8)))
#dense
ggplot() +
geom_line(data = data, aes(x=sample_size, y= median, color= power,linetype = lt)) +
theme_minimal() +
geom_line(data = data2,aes(x=sample_size, y= median, color= power,linetype = lt)) +
# coord_cartesian(ylim = c(0,4)) +
theme(legend.position="bottom", legend.box="vertical", legend.margin=margin()) + theme(strip.text.y = element_blank()) +
scale_color_manual(
breaks = power[1:6],
values = c('black','#F596AA','#FFBA84','#D9CD90', '#A5DEE4',
'#D0104C', '#F9BF45'))  +
ylab("Target error") + xlab("Sampling rate")+ ylim(c(0,1.5)) + scale_linetype_manual(
breaks = c(1,2) %>% as.factor, values = c(1,6), labels = unname(TeX(c("$|| \\cdot ||_2$","$|| \\cdot ||_{2 \\rightarrow \\infty}$")))) +
labs(linetype = "Error norm", color = "")
load("/Users/yichizhang/Desktop/Compressed SVD/real_application/missing data covaraince /covest_change_s.RData")
library(ggplot2)
library(directlabels)
library(scales)
library(scales)
# squish_trans <- function(from, to, factor) {
#
#   trans <- function(x) {
#
#     if (any(is.na(x))) return(x)
#
#     # get indices for the relevant regions
#     isq <- x > from & x < to
#     ito <- x >= to
#
#     # apply transformation
#     x[isq] <- from + (x[isq] - from)/factor
#     x[ito] <- from + (to - from)/factor + (x[ito] - to)
#
#     return(x)
#   }
#
#   inv <- function(x) {
#
#     if (any(is.na(x))) return(x)
#
#     # get indices for the relevant regions
#     isq <- x > from & x < from + (to - from)/factor
#     ito <- x >= from + (to - from)/factor
#
#     # apply transformation
#     x[isq] <- from + (x[isq] - from) * factor
#     x[ito] <- to + (x[ito] - (from + (to - from)/factor))
#
#     return(x)
#   }
#
#   # return the transformation
#   return(trans_new("squished", trans, inv))
# }
sr = vector()
power = vector()
error_s = vector()
error_twoinf = vector()
error = vector()
upper = vector()
lower = vector()
linetype1 = vector()
linetype2 = vector()
for (pi in 1:length(n_pool)){
ac_s = matrix(0, nrow =1,ncol = length(g_pool) + 1)
ac_twoinf = matrix(0, nrow =1,ncol = length(g_pool) + 1)
p = p_pool[pi]
for (i in 1:N){
ac_s = rbind(ac_s, overall_record[[pi]][[i]][[1]])
ac_twoinf = rbind(ac_twoinf, overall_record[[pi]][[i]][[2]])
}
0
error_s = c(error_s, apply(ac_s[-1,],2,mean))
error_twoinf = c(error_twoinf, apply(ac_twoinf[-1,],2,mean))
linetype1 = c(linetype1,rep(1,length(g_pool) + 1))
linetype2 = c(linetype2,rep(2,length(g_pool) + 1))
sr = c(sr,rep(n_pool[pi],length(g_pool) + 1))
power = c(power, c("Benchmark", paste("power", as.character(g_pool))))
#Range sketching: RS; Randomized rangefinder: RR
}
data = data.frame(median = error_s, sample_size = sr, power = as.factor(power), lt = linetype1 %>% as.factor)
data2 = data.frame(median = error_twoinf, sample_size = sr, power = as.factor(power), lt = linetype2 %>% as.factor)
# #sparse
# ggplot(data = data,aes(x=sample_size, y= median, color= power,linetype = power)) +
#   geom_line() + theme_minimal() +
#   # coord_cartesian(ylim = c(0,4)) +
#   theme(legend.position="bottom") + scale_color_manual(
#     breaks = power[1:9],
#     values = c('black','#F596AA','#FFBA84','#D9CD90', '#A5DEE4',
#                '#D0104C', '#F9BF45', '#7BA23F', '#268785')) +
#   scale_linetype_manual(breaks = power[1:9], values = c(1,rep(6,8)))
#dense
ggplot() +
geom_line(data = data, aes(x=sample_size, y= median, color= power,linetype = lt)) +
theme_minimal() +
geom_line(data = data2,aes(x=sample_size, y= median, color= power,linetype = lt)) +
# coord_cartesian(ylim = c(0,4)) +
theme(legend.position="bottom", legend.box="vertical", legend.margin=margin()) + theme(strip.text.y = element_blank()) +
scale_color_manual(
breaks = power[1:6],
values = c('black','#F596AA','#FFBA84','#D9CD90', '#A5DEE4',
'#D0104C', '#F9BF45'))  +
ylab("Target error") + xlab("Noise Level")+ ylim(c(0,1.5)) + scale_linetype_manual(
breaks = c(1,2) %>% as.factor, values = c(1,6), labels = unname(TeX(c("$|| \\cdot ||_2$","$|| \\cdot ||_{2 \\rightarrow \\infty}$")))) +
labs(linetype = "Error norm", color = "")
library(ggplot2)
library(directlabels)
library(scales)
library(scales)
# squish_trans <- function(from, to, factor) {
#
#   trans <- function(x) {
#
#     if (any(is.na(x))) return(x)
#
#     # get indices for the relevant regions
#     isq <- x > from & x < to
#     ito <- x >= to
#
#     # apply transformation
#     x[isq] <- from + (x[isq] - from)/factor
#     x[ito] <- from + (to - from)/factor + (x[ito] - to)
#
#     return(x)
#   }
#
#   inv <- function(x) {
#
#     if (any(is.na(x))) return(x)
#
#     # get indices for the relevant regions
#     isq <- x > from & x < from + (to - from)/factor
#     ito <- x >= from + (to - from)/factor
#
#     # apply transformation
#     x[isq] <- from + (x[isq] - from) * factor
#     x[ito] <- to + (x[ito] - (from + (to - from)/factor))
#
#     return(x)
#   }
#
#   # return the transformation
#   return(trans_new("squished", trans, inv))
# }
sr = vector()
power = vector()
error_s = vector()
error_twoinf = vector()
error = vector()
upper = vector()
lower = vector()
linetype1 = vector()
linetype2 = vector()
for (pi in 1:length(s_pool)){
ac_s = matrix(0, nrow =1,ncol = length(g_pool) + 1)
ac_twoinf = matrix(0, nrow =1,ncol = length(g_pool) + 1)
p = p_pool[pi]
for (i in 1:N){
ac_s = rbind(ac_s, overall_record[[pi]][[i]][[1]])
ac_twoinf = rbind(ac_twoinf, overall_record[[pi]][[i]][[2]])
}
0
error_s = c(error_s, apply(ac_s[-1,],2,mean))
error_twoinf = c(error_twoinf, apply(ac_twoinf[-1,],2,mean))
linetype1 = c(linetype1,rep(1,length(g_pool) + 1))
linetype2 = c(linetype2,rep(2,length(g_pool) + 1))
sr = c(sr,rep(s_pool[pi],length(g_pool) + 1))
power = c(power, c("Benchmark", paste("power", as.character(g_pool))))
#Range sketching: RS; Randomized rangefinder: RR
}
data = data.frame(median = error_s, sample_size = sr, power = as.factor(power), lt = linetype1 %>% as.factor)
data2 = data.frame(median = error_twoinf, sample_size = sr, power = as.factor(power), lt = linetype2 %>% as.factor)
# #sparse
# ggplot(data = data,aes(x=sample_size, y= median, color= power,linetype = power)) +
#   geom_line() + theme_minimal() +
#   # coord_cartesian(ylim = c(0,4)) +
#   theme(legend.position="bottom") + scale_color_manual(
#     breaks = power[1:9],
#     values = c('black','#F596AA','#FFBA84','#D9CD90', '#A5DEE4',
#                '#D0104C', '#F9BF45', '#7BA23F', '#268785')) +
#   scale_linetype_manual(breaks = power[1:9], values = c(1,rep(6,8)))
#dense
ggplot() +
geom_line(data = data, aes(x=sample_size, y= median, color= power,linetype = lt)) +
theme_minimal() +
geom_line(data = data2,aes(x=sample_size, y= median, color= power,linetype = lt)) +
# coord_cartesian(ylim = c(0,4)) +
theme(legend.position="bottom", legend.box="vertical", legend.margin=margin()) + theme(strip.text.y = element_blank()) +
scale_color_manual(
breaks = power[1:6],
values = c('black','#F596AA','#FFBA84','#D9CD90', '#A5DEE4',
'#D0104C', '#F9BF45'))  +
ylab("Target error") + xlab("Noise Level")+ ylim(c(0,1.5)) + scale_linetype_manual(
breaks = c(1,2) %>% as.factor, values = c(1,6), labels = unname(TeX(c("$|| \\cdot ||_2$","$|| \\cdot ||_{2 \\rightarrow \\infty}$")))) +
labs(linetype = "Error norm", color = "")
#   # coord_cartesian(ylim = c(0,4)) +
source("NP_Causal_functions.R")
############T
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(0,rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("T")
#######X
source("NP_Causal_functions.R")
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("X")
setwd("~/Desktop/Nonpara_Causal_Inference/Simulation/NP_Causal_functions/Nonparametric-Causal-Effect-Estimation-with-Continuous-Treatment")
source("NP_Causal_functions.R")
############T
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(0,rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("T")
#######X
source("NP_Causal_functions.R")
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("X")
source("NP_Causal_functions.R")
############T
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(0,rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  + theme(legend.position = 'none') +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("T")
#######X
source("NP_Causal_functions.R")
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() + theme(legend.position = 'none') +
theme_minimal()  +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("X")
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() + theme(legend.position = 'none') +
theme_minimal()  +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("X")
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  + theme(legend.position = 'none') +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("X")
source("NP_Causal_functions.R")
############T
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(0,rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  + theme(legend.position = 'none') +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("x") + ylab("")
#######X
source("NP_Causal_functions.R")
polylist <- list()
num_spline <- 15
for (i in 1:num_spline){
polylist[[i]] <-  polynomial(c(rep(0,i - 1), 1))
}
othno_poly <- gram_schmidt(polylist, c(-1,1))
x0 <- seq(-1,1,0.001)
ylist <- list()
for (i in 1:num_spline){
ylist[[i]] <- as.function(othno_poly[[i]])(x0)
}
x <- vector()
for (i in 1:num_spline){
x <- c(x,x0)
}
y <- vector()
for (i in 1:num_spline){
y <- c(y, ylist[[i]])
}
degree <- vector()
for (i in 1:num_spline){
degree <- c(degree, rep(i,length(x0)))
}
data <- data.frame(x = x, y = y, degree = degree %>% as.character)
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  + theme(legend.position = 'none') +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("x") + ylab("")
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  + theme(legend.position = 'none') +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("x") + ylab("")
ggplot(data = data, aes(x = x, y = y, color = degree)) + geom_line() +
theme_minimal()  + theme(legend.position = 'none') +
geom_segment(aes(x = -0.95,y = -3.9,xend = -0.95,yend = 3.9), linetype = "dashed",size=0.3,color = "black") +
geom_segment(aes(x = 0.95,y = -3.9,xend = 0.95,yend = 3.9), linetype = "dashed",size=0.3, color = "black") + xlab("x") + ylab("")
